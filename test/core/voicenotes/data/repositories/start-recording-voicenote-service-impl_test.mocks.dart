// Mocks generated by Mockito 5.0.10 from annotations
// in tatsam_app_experimental/test/core/voicenotes/data/repositories/start-recording-voicenote-service-impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter_sound_platform_interface/flutter_sound_platform_interface.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tatsam_app_experimental/core/platform/network_info.dart' as _i6;
import 'package:tatsam_app_experimental/core/voicenotes/data/source/start-recording-voicenote-local-service.dart'
    as _i3;
import 'package:tatsam_app_experimental/core/voicenotes/domain/entity/recording-started-status.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeRecordingStarted extends _i1.Fake implements _i2.RecordingStarted {}

/// A class which mocks [StartRecordingVoiceNoteLocalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartRecordingVoiceNoteLocalService extends _i1.Mock
    implements _i3.StartRecordingVoiceNoteLocalService {
  MockStartRecordingVoiceNoteLocalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.RecordingStarted> startRecording(
          {String? filePath, _i5.Codec? codec}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #startRecording, [], {#filePath: filePath, #codec: codec}),
              returnValue:
                  Future<_i2.RecordingStarted>.value(_FakeRecordingStarted()))
          as _i4.Future<_i2.RecordingStarted>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
