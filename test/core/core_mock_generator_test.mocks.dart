// Mocks generated by Mockito 5.0.10 from annotations
// in tatsam_app_experimental/test/core/core_mock_generator_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:hive/hive.dart' as _i11;
import 'package:http/src/response.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tatsam_app_experimental/core/auth/domain/entities/oauth-data.dart'
    as _i9;
import 'package:tatsam_app_experimental/core/auth/domain/entities/user-data.dart'
    as _i10;
import 'package:tatsam_app_experimental/core/auth/domain/repositories/auth-repository.dart'
    as _i7;
import 'package:tatsam_app_experimental/core/data-source/api-client.dart'
    as _i6;
import 'package:tatsam_app_experimental/core/error/failures.dart' as _i8;
import 'package:tatsam_app_experimental/core/platform/network_info.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResponse extends _i1.Fake implements _i2.Response {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i6.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response> post({String? uri, String? body}) => (super
          .noSuchMethod(Invocation.method(#post, [], {#uri: uri, #body: body}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
      as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> get({String? uri}) =>
      (super.noSuchMethod(Invocation.method(#get, [], {#uri: uri}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i5.Future<_i2.Response>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i7.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i8.Failure, _i9.OAuthData>> oauthLogin() =>
      (super.noSuchMethod(Invocation.method(#oauthLogin, []),
              returnValue: Future<_i3.Either<_i8.Failure, _i9.OAuthData>>.value(
                  _FakeEither<_i8.Failure, _i9.OAuthData>()))
          as _i5.Future<_i3.Either<_i8.Failure, _i9.OAuthData>>);
  @override
  _i5.Future<_i3.Either<_i8.Failure, _i9.OAuthData>> oauthSignup() =>
      (super.noSuchMethod(Invocation.method(#oauthSignup, []),
              returnValue: Future<_i3.Either<_i8.Failure, _i9.OAuthData>>.value(
                  _FakeEither<_i8.Failure, _i9.OAuthData>()))
          as _i5.Future<_i3.Either<_i8.Failure, _i9.OAuthData>>);
  @override
  _i5.Future<_i3.Either<_i8.Failure, _i3.Unit>> requestLogout() =>
      (super.noSuchMethod(Invocation.method(#requestLogout, []),
              returnValue: Future<_i3.Either<_i8.Failure, _i3.Unit>>.value(
                  _FakeEither<_i8.Failure, _i3.Unit>()))
          as _i5.Future<_i3.Either<_i8.Failure, _i3.Unit>>);
  @override
  _i5.Future<_i3.Either<_i8.Failure, _i9.OAuthData>> requestNewToken() =>
      (super.noSuchMethod(Invocation.method(#requestNewToken, []),
              returnValue: Future<_i3.Either<_i8.Failure, _i9.OAuthData>>.value(
                  _FakeEither<_i8.Failure, _i9.OAuthData>()))
          as _i5.Future<_i3.Either<_i8.Failure, _i9.OAuthData>>);
  @override
  _i5.Future<_i3.Either<_i8.Failure, bool>> checkIfAuthenticated() =>
      (super.noSuchMethod(Invocation.method(#checkIfAuthenticated, []),
              returnValue: Future<_i3.Either<_i8.Failure, bool>>.value(
                  _FakeEither<_i8.Failure, bool>()))
          as _i5.Future<_i3.Either<_i8.Failure, bool>>);
  @override
  _i5.Future<_i3.Either<_i8.Failure, _i10.UserData>> getUserDetails() =>
      (super.noSuchMethod(Invocation.method(#getUserDetails, []),
              returnValue: Future<_i3.Either<_i8.Failure, _i10.UserData>>.value(
                  _FakeEither<_i8.Failure, _i10.UserData>()))
          as _i5.Future<_i3.Either<_i8.Failure, _i10.UserData>>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i11.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: [])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: [])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: []) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i5.Stream<_i11.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
      Invocation.method(#watch, [], {#key: key}),
      returnValue: Stream<_i11.BoxEvent>.empty()) as _i5.Stream<_i11.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i5.Future<void> put(dynamic key, E? value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> putAt(int? index, E? value) =>
      (super.noSuchMethod(Invocation.method(#putAt, [index, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> putAll(Map<dynamic, E>? entries) =>
      (super.noSuchMethod(Invocation.method(#putAll, [entries]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: Future<Iterable<int>>.value([]))
          as _i5.Future<Iterable<int>>);
  @override
  _i5.Future<void> delete(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#deleteAt, [index]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAll(Iterable<dynamic>? keys) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [keys]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> compact() =>
      (super.noSuchMethod(Invocation.method(#compact, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}
