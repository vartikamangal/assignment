// Mocks generated by Mockito 5.0.10 from annotations
// in tatsam_app_experimental/test/features/focus/data/repositories/remove-issue-service-impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tatsam_app_experimental/core/platform/network_info.dart' as _i8;
import 'package:tatsam_app_experimental/features/focus/data/models/issue-model.dart'
    as _i7;
import 'package:tatsam_app_experimental/features/focus/data/sources/focus-remote-data-source.dart'
    as _i4;
import 'package:tatsam_app_experimental/features/focus/domain/entities/add-issue-success.dart'
    as _i2;
import 'package:tatsam_app_experimental/features/focus/domain/entities/issue-removed-success.dart'
    as _i3;
import 'package:tatsam_app_experimental/features/focus/domain/entities/issue.dart'
    as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAddIssueSuccess extends _i1.Fake implements _i2.AddIssueSuccess {}

class _FakeIssueRemovedSuccess extends _i1.Fake
    implements _i3.IssueRemovedSuccess {}

/// A class which mocks [FocusRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFocusRemoteDataSource extends _i1.Mock
    implements _i4.FocusRemoteDataSource {
  MockFocusRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.AddIssueSuccess> addIssue({_i6.Issue? issue}) =>
      (super.noSuchMethod(Invocation.method(#addIssue, [], {#issue: issue}),
              returnValue:
                  Future<_i2.AddIssueSuccess>.value(_FakeAddIssueSuccess()))
          as _i5.Future<_i2.AddIssueSuccess>);
  @override
  _i5.Future<List<_i7.IssueModel>> getIssues() => (super.noSuchMethod(
          Invocation.method(#getIssues, []),
          returnValue: Future<List<_i7.IssueModel>>.value(<_i7.IssueModel>[]))
      as _i5.Future<List<_i7.IssueModel>>);
  @override
  _i5.Future<_i3.IssueRemovedSuccess> removeIssue({_i6.Issue? issue}) =>
      (super.noSuchMethod(Invocation.method(#removeIssue, [], {#issue: issue}),
              returnValue: Future<_i3.IssueRemovedSuccess>.value(
                  _FakeIssueRemovedSuccess()))
          as _i5.Future<_i3.IssueRemovedSuccess>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i8.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
