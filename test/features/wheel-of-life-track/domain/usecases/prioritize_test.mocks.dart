// Mocks generated by Mockito 5.0.10 from annotations
// in tatsam_app_experimental/test/features/wheel-of-life-track/domain/usecases/prioritize_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tatsam_app_experimental/core/error/failures.dart' as _i5;
import 'package:tatsam_app_experimental/core/success/success-interface.dart'
    as _i8;
import 'package:tatsam_app_experimental/features/wheel-of-life-track/domain/entities/life-area.dart'
    as _i6;
import 'package:tatsam_app_experimental/features/wheel-of-life-track/domain/entities/life-areas-for-prioritization.dart'
    as _i9;
import 'package:tatsam_app_experimental/features/wheel-of-life-track/domain/entities/rating-scale.dart'
    as _i7;
import 'package:tatsam_app_experimental/features/wheel-of-life-track/domain/entities/satisfaction-ratings.dart'
    as _i10;
import 'package:tatsam_app_experimental/features/wheel-of-life-track/domain/repositories/wheel-of-life-repository.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [WheelOfLifeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWheelOfLifeRepository extends _i1.Mock
    implements _i2.WheelOfLifeRepository {
  MockWheelOfLifeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i6.LifeArea>>?> getLifeAreas() =>
      (super.noSuchMethod(Invocation.method(#getLifeAreas, []),
              returnValue:
                  Future<_i4.Either<_i5.Failure, List<_i6.LifeArea>>?>.value())
          as _i3.Future<_i4.Either<_i5.Failure, List<_i6.LifeArea>>?>);
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i7.RatingScale>?> getRatingScale() =>
      (super.noSuchMethod(Invocation.method(#getRatingScale, []),
              returnValue:
                  Future<_i4.Either<_i5.Failure, _i7.RatingScale>?>.value())
          as _i3.Future<_i4.Either<_i5.Failure, _i7.RatingScale>?>);
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i8.Success>?> prioritize(
          {_i9.LifeAreaForPrioritization? lifeAreas}) =>
      (super.noSuchMethod(
              Invocation.method(#prioritize, [], {#lifeAreas: lifeAreas}),
              returnValue:
                  Future<_i4.Either<_i5.Failure, _i8.Success>?>.value())
          as _i3.Future<_i4.Either<_i5.Failure, _i8.Success>?>);
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i8.Success>?> rateSatisfactionService(
          {_i10.SatisfactionRatings? satisfactionRatings}) =>
      (super.noSuchMethod(
              Invocation.method(#rateSatisfactionService, [],
                  {#satisfactionRatings: satisfactionRatings}),
              returnValue:
                  Future<_i4.Either<_i5.Failure, _i8.Success>?>.value())
          as _i3.Future<_i4.Either<_i5.Failure, _i8.Success>?>);
}
